import os
import sys
import numpy
VERBOSE = False

def run_cmd( cmd ):
    if VERBOSE: print cmd
    os.system( cmd )

def read_matrix( file ):
    rownames = []
    colnames = []
    m = []
    f = open( file )
    for line in f.xreadlines():
        if line[0] == "#": continue
        rownames = line[:-1].split("\t")[1:]
        break
    for line in f.xreadlines():
        fields = line[:-1].split("\t")
        colnames.append( fields[0] )
        m.append( [ float(x) for x in fields[1:] ] )
    return numpy.matrix( m ), rownames, colnames

def merge_and_correct( file_list, quartile = 3/4.0*100 ):
    print "[ Averaging matrix files ]"
    total_m = []
    m, rownames, colnames = read_matrix( file_list[0] )
    total_m.append( m )
    sum_m = m
    for file in file_list[1:]:
        m, rownames, colnames = read_matrix( file )
        total_m.append( m )
        sum_m += m
    #print "============ sum_m ============"
    #print sum_m

    #print "============ numpy.average( total_m ) ============"
    #print numpy.average( total_m )

    #print "============ sum_m / len( file_list ) ============"
    tmpIS = sum_m / len( file_list )
    
    print "[ Quartile correction for auto-activator signal ]", quartile
    avgIS = []
    for x in tmpIS.getA():
        cutoff = numpy.percentile(x, quartile )
        values = []
        for y in x:
            z = max( y - cutoff, 0.0 )
            values.append( z )
        avgIS.append( values )
    return tmpIS, numpy.matrix( avgIS ), rownames, colnames
    
def run( args ):
    #print args.input # the experiments type ('Y2H'|'Y3H')
    #print args.matrix1 # the interaction matrix of selection condition
    #print args.matrix2 # the interaction matrix of non-selection condition
    #print args.output # the output folder name
    #print args.name # output name
    
    # file check
    
    file_list = []
    for filepath in args.input:
        print "[ Checking matrix files ]", filepath
        if os.path.exists( filepath ) == False:
            print "File doesn't exist: %s" % filepath
            sys.exit( 0 )
        else:
            file_list.append( filepath )
 
    if len( file_list ) == 0:
        print "File doesn't exist"
        sys.exit( 0 )

    no_correct_m, final_m, rownames, colnames = merge_and_correct( file_list, float(args.quartile) * 100 )

    [ dirname1, m1 ] = os.path.split( file_list[0] )

    if args.output == None:
        args.output = dirname1
    
    # make output folder
    if os.path.exists( args.output ) == False:
        os.makedirs( args.output )

    # save avgIS (quartile corrected)
    print "[ Saving Average Interaction Score matrix ]", os.path.join( args.output, args.name )
    fout = open( os.path.join( args.output, args.name ), "w" )
    fout.write( "# This file contains 'average Interaction Scores' generated by rec-YnH merge command\n" )  
    output = "DB(Read 1) \ AD(Read 2)"	
    for name in rownames:
        output += "\t"
        output += name
    fout.write( output + "\n" )
    i = 0
    for x in final_m.getA():
        j = 0
        output = colnames[i]
        for y in x:
            output += "\t"
            output += "%f" % y
            j += 1
        i += 1
        output += "\n"
        fout.write( output )
    fout.close()

    '''
    # save originalIS
    fout = open( os.path.join( args.output, args.name + ".no_quartile" ), "w" )
    fout.write( "# This file contains 'average Interaction Scores' generated by rec-YnH\n" )  
    output = "DB(Read 1) \ AD(Read 2)"	
    for name in rownames:
        output += "\t"
        output += name
    fout.write( output + "\n" )
    i = 0
    for x in no_correct_m.getA():
        j = 0
        output = colnames[i]
        for y in x:
            output += "\t"
            output += "%f" % y
            j += 1
        i += 1
        output += "\n"
        fout.write( output )
    fout.close()
    '''